#ifndef DIAG
#define DIAG(ID, Level, Msg)
#endif

// Lexer errors
DIAG(err_unknown_token, Error, "Unknown token.")

// Parser errors
DIAG(err_invalid_assign_target, Error, "Invalid assignment target.")
DIAG(err_expect, Error, "Expected {0}.")
DIAG(err_array_init_not_uniform, Error, "Elements of array initializer list must be all initializer lists or all expressions.")

// Semantic check errors
DIAG(err_var_redefine, Error, "Redefinition of an existing variable.")
DIAG(err_fun_redefine, Error, "Redefinition of an existing function.")
DIAG(err_var_undefined, Error, "Undefined variable.")
DIAG(err_fun_undefined, Error, "Undefined function.")
DIAG(err_ret_val_undefined, Error, "Must have a return value.")
DIAG(err_no_return, Error, "Function must have a return statement.")
DIAG(err_incompatible_types, Error, "Incompatible types.")
DIAG(err_ret_type_mismatch, Error, "Mismatching return type.")
DIAG(err_ret_type_array, Error, "Return type must not be an array.")
DIAG(err_cond_not_bool, Error, "Condition must be of boolean type.")
DIAG(err_arith_type, Error, "Arithmetic operators expect operands of INT type.")
DIAG(err_logic_type, Error, "Logical operators expect operands of BOOL type.")
DIAG(err_arg_num_mismatch, Error, "Number of function call and declaration arguments mismatching.")
DIAG(err_arg_type_mismatch, Error, "Type of function call and declaration argument mismatching.")
DIAG(err_addrof_target_not_mem, Error, "Can take address only of in-memory variables.")
DIAG(err_deref_target_not_ptr_mem, Error, "Can dereference only pointers to in-memory variables.")
DIAG(err_array_size_not_int, Error, "Array size can only be specified by an integer.")
DIAG(err_array_access_not_int, Error, "Array index must be of integer type.")
DIAG(err_array_access_not_array, Error, "Indexed variable must be of array or pointer type.")
DIAG(err_array_init_not_same_type, Error, "Array initializer list values must be of the same type.")

#undef DIAG
